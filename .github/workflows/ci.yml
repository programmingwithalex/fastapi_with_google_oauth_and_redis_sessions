name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  # match your auth_serviceâ€™s required ENV
  REDIS_HOST: localhost
  REDIS_PORT: 6379
  REDIS_DB: 0
  REDIS_SSL: "false"
  SESSION_EXPIRE_TIME_SECONDS: 3600
  AUTH_SERVICE_URL: http://localhost:8000
  GOOGLE_OAUTH_TOKEN_URL: https://oauth2.googleapis.com/token
  GOOGLE_OAUTH_USERINFO_URL: https://www.googleapis.com/oauth2/v3/userinfo
  GOOGLE_REDIRECT_URI: http://localhost:8000/auth/google
  GOOGLE_OAUTH_CLIENT_ID: your-client-id
  GOOGLE_OAUTH_CLIENT_SECRET: your-client
  WEB_FRONTEND_URL: http://localhost:5000

jobs:
  test:
    runs-on: ubuntu-latest

    # * https://docs.github.com/en/actions/use-cases-and-examples/using-containerized-services/about-service-containers
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache dependencies (linux)
      uses: actions/cache@main
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache dependencies (windows)
      uses: actions/cache@main
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade uv  # faster way to install dependencies
        python -m uv pip install ruff mypy isort pytest bandit pylint interrogate wheel setuptools --system
        python -m uv pip install pytest pytest-mock requests_mock

        python -m uv pip install -r pyproject.toml --system

    - name: Lint with ruff
      id: ruff
      continue-on-error: true
      run: |
        ruff check

    - name: Lint with mypy
      id: mypy
      continue-on-error: true  # will check failure after
      run: |
        mypy .

    - name: Lint with pylint  # must have __init__.py in top directory to run recursively
      id: pylint
      continue-on-error: true  # will check failure after
      run: |
        pylint *

    - name: Lint with interrogate (docstring checker)
      id: interrogate
      continue-on-error: true  # will check failure after
      run: |
        interrogate .

    - name: Lint with isort
      run: |
        # --diff: Prints a diff of all the changes isort would make to a file
        isort . --diff;
        echo $"isort_errors";

    - name: check any `ruff`, `mypy`, `pylint`, `interrogate` checks failed
      if: |
        (steps.ruff.outcome != 'success') ||
        (steps.mypy.outcome != 'success') ||
        (steps.pylint.outcome != 'success') ||
        (steps.interrogate.outcome != 'success')
      run: |
        echo "one or all of ruff, mypy, pylint, or interrogate failed"
        exit 1

    - name: Run tests
      env:
        SECRET_KEY: secret-key
        REDIS_HOST: ${{ env.REDIS_HOST }}
        REDIS_SSL: ${{ env.REDIS_SSL }}
        REDIS_DB: ${{ env.REDIS_DB }}
        SESSION_EXPIRE_TIME_SECONDS: ${{ env.SESSION_EXPIRE_TIME_SECONDS }}
        AUTH_SERVICE_URL: ${{ env.AUTH_SERVICE_URL }}
        GOOGLE_OAUTH_TOKEN_URL: ${{ env.GOOGLE_OAUTH_TOKEN_URL }}
        GOOGLE_OAUTH_USERINFO_URL: ${{ env.GOOGLE_OAUTH_USERINFO_URL }}
        GOOGLE_OAUTH_CLIENT_ID: ${{ env.GOOGLE_OAUTH_CLIENT_ID }}
        GOOGLE_OAUTH_CLIENT_SECRET: ${{ env.GOOGLE_OAUTH_CLIENT_SECRET }}
        WEB_FRONTEND_URL: ${{ env.WEB_FRONTEND_URL }}
      run: |
        python -m pytest .

    - name: Run bandit (security checks)
      run: |
        if [ -f "pyproject.toml" ]; then bandit -r . -c "pyproject.toml"; fi
